#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <windows.h>
#include <locale.h>
#include <string.h>
#define SIZE 150

typedef struct string_ {
	char s[SIZE] = { 0 };
}strings;

typedef struct typefrases {
	strings connection[SIZE];
	int cur_con = 0;
	strings danger[SIZE];
	int cur_dan = 0;
	strings hot[SIZE];
	int cur_hot = 0;
	strings cold[SIZE];
	int cur_cold = 0;
	strings nofall[SIZE];
	int cur_nofall = 0;
	strings fall[SIZE];
	int cur_fall = 0;
	strings snow[SIZE];
	int cur_snow = 0;
	strings rain[SIZE];
	int cur_rain = 0;
	strings nowind[SIZE];
	int cur_nowind = 0;
	strings wind[SIZE];
	int cur_wind = 0;
	strings strongwind[SIZE];
	int cur_strong = 0;
	strings lowpressure[SIZE];
	int cur_low = 0;
	strings highpressure[SIZE];
	int cur_high = 0;
}fras;

typedef struct day {
	int date[3] = { 0 };
	int nighttemp[2] = { 0 };
	int daytemp[2] = { 0 };
	int feelstemp[2] = { 0 };
	char osadki[20] = { 0 };
	char windspeed[20];
	char windway[20];
	char poriv[20];
	int pressure = 0;
	char fact[20] = { 0 };
	char time_of_year[20] = { 0 };
	char month[20] = { 0 };
}weather;

int main() {
	setlocale(LC_ALL, "RUS");
	printf("Ща запущю погодь...\n");
	weather days[SIZE];
	fras frase;
	int cur = 0;
	FILE* input;
	FILE* frases;
	input = fopen("input.txt", "rt");
	frases = fopen("frases.txt", "rt");
	char str[SIZE] = { 0 };
	while (!feof(input)) {
		fgets(str, SIZE, input);
		sscanf(str, "%d.%d.%d %d..%d %d..%d %d..%d %s %s %s %s %d %s", &days[cur].date[0], &days[cur].date[1], &days[cur].date[2],
			&days[cur].nighttemp[0], &days[cur].nighttemp[1], &days[cur].daytemp[0], &days[cur].daytemp[1], &days[cur].feelstemp[0], &days[cur].feelstemp[1],
			days[cur].osadki, days[cur].windspeed, days[cur].windway, days[cur].poriv, &days[cur].pressure, days[cur].fact);
		switch (days[cur].date[1]) {
		case 1:
			strncat(days[cur].month, "января", SIZE);
			strncat(days[cur].time_of_year, "зима", SIZE);
			break;
		case 2:
			strncat(days[cur].month, "февраля", SIZE);
			strncat(days[cur].time_of_year, "зима", SIZE);
			break;
		case 3:
			strncat(days[cur].month, "марта", SIZE);
			strncat(days[cur].time_of_year, "весна", SIZE);
			break;
		case 4:
			strncat(days[cur].month, "апреля", SIZE);
			strncat(days[cur].time_of_year, "весна", SIZE);
			break;
		case 5:
			strncat(days[cur].month, "мая", SIZE);
			strncat(days[cur].time_of_year, "весна", SIZE);
			break;
		case 6:
			strncat(days[cur].month, "июня", SIZE);
			strncat(days[cur].time_of_year, "лето", SIZE);
			break;
		case 7:
			strncat(days[cur].month, "июля", SIZE);
			strncat(days[cur].time_of_year, "лето", SIZE);
			break;
		case 8:
			strncat(days[cur].month, "августа", SIZE);
			strncat(days[cur].time_of_year, "лето", SIZE);
			break;
		case 9:
			strncat(days[cur].month, "сентября", SIZE);
			strncat(days[cur].time_of_year, "осень", SIZE);
			break;
		case 10:
			strncat(days[cur].month, "октября", SIZE);
			strncat(days[cur].time_of_year, "осень", SIZE);
			break;
		case 11:
			strncat(days[cur].month, "ноября", SIZE);
			strncat(days[cur].time_of_year, "осень", SIZE);
			break;
		case 12:
			strncat(days[cur].month, "декабря", SIZE);
			strncat(days[cur].time_of_year, "зима", SIZE);
			break;
		}
		cur++;
	}
	cur = 0;
	while (!feof(frases)) {
		fgets(str, SIZE, frases);
		if (strcmp(str, "-connection\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.connection[cur].s, str, SIZE);
				printf("%s\n", frase.connection[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_con = cur;
			cur = 0;
		}
		if (strcmp(str, "-danger\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.danger[cur].s, str, SIZE);
				printf("%s\n", frase.danger[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_den = cur;
			cur = 0;
		}
		if (strcmp(str, "-hot\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.hot[cur].s, str, SIZE);
				printf("%s\n", frase.hot[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_hot = cur;
			cur = 0;
		}
		if (strcmp(str, "-cold\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.cold[cur].s, str, SIZE);
				printf("%s\n", frase.cold[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_cold = cur;
			cur = 0;
		}
		if (strcmp(str, "-no fall\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.nofall[cur].s, str, SIZE);
				printf("%s\n", frase.nofall[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_nofall = cur;
			cur = 0;
		}
		if (strcmp(str, "-fall\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.fall[cur].s, str, SIZE);
				printf("%s\n", frase.fall[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_fall = cur;
			cur = 0;
		}
		if (strcmp(str, "-snow\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.snow[cur].s, str, SIZE);
				printf("%s\n", frase.snow[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_snow = cur;
			cur = 0;
		}
		if (strcmp(str, "-rain\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.rain[cur].s, str, SIZE);
				printf("%s\n", frase.rain[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_rain = cur;
			cur = 0;
		}
		if (strcmp(str, "-no wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.nowind[cur].s, str, SIZE);
				printf("%s\n", frase.nowind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_nowind = cur;
			cur = 0;
		}
		if (strcmp(str, "-wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.wind[cur].s, str, SIZE);
				printf("%s\n", frase.wind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_wind = cur;
			cur = 0;
		}
		if (strcmp(str, "-strong wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.strongwind[cur].s, str, SIZE);
				printf("%s\n", frase.strongwind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_strong = cur;
			cur = 0;
		}
		if (strcmp(str, "-low pressure\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.lowpressure[cur].s, str, SIZE);
				printf("%s\n", frase.lowpressure[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_low = cur;
			cur = 0;
		}
		if (strcmp(str, "-high pressure\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0 && strcmp(str, frase.highpressure[cur - 1].s) != 0) {
				str[strlen(str) - 1] = '\0';
				strncat(frase.highpressure[cur].s, str, SIZE);
				printf("%s\n", frase.highpressure[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_high = cur;
			cur = 0;
		}
	}
	fclose(input);
	fclose(frases);
}
