#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <windows.h>
#include <locale.h>
#include <string.h>
#include <time.h>
#define SIZE 150

typedef struct string_ {
	char s[SIZE];
}strings;

typedef struct typefrases {
	strings connection[SIZE];
	int cur_con;
	strings danger[SIZE];
	int cur_dan;
	strings hot[SIZE];
	int cur_hot;
	strings cold[SIZE];
	int cur_cold;
	strings nofall[SIZE];
	int cur_nofall;
	strings fall[SIZE];
	int cur_fall;
	strings snow[SIZE];
	int cur_snow;
	strings rain[SIZE];
	int cur_rain;
	strings nowind[SIZE];
	int cur_nowind;
	strings wind[SIZE];
	int cur_wind;
	strings strongwind[SIZE];
	int cur_strong;
	strings lowpressure[SIZE];
	int cur_low;
	strings greeting[SIZE];
	int cur_greet;
	strings place[SIZE];
	int cur_place;
	strings when[SIZE];
	int cur_when;
	strings unions[SIZE];
	int cur_union;
	strings verbs[SIZE];
	int cur_verb;
	strings highpressure[SIZE];
	int cur_high;
}fras;

typedef struct day {
	int date[3];
	int nighttemp[2];
	int daytemp[2];
	int feelstemp[2];
	char fall[20];
	int windspeed[2];
	char windway[20];
	int gust[2];
	int pressure;
	char fact[20];
	char time_of_year[20];
	char month[20];
}weather;

typedef struct rates {
	int coldTempRate; // 5 - death, 4 - bad, 3 - oh, 2 - ok, 1 - nice
	int hotTempRate; // 5 - death, 4 - bad, 3 - oh, 2 - ok, 1 - nice
	int windSpeedRate; // 5 - death, 4 - bad, 3 - oh, 2 - ok, 1 - nice
	int pressureRate; // 0 - low, 1 - ok, 2 - high
} rate;

void makesent(weather days[], rate rates[], int dayscount) {
	int max = 0;
	char maininf[SIZE] = { 0 };
	if (rates[dayscount].coldTempRate > max) {
		max = rates[dayscount].coldTempRate;
		strcpy(maininf, "cold");
	}
	if (rates[dayscount].hotTempRate > max) {
		max = rates[dayscount].hotTempRate;
		strcpy(maininf, "hot");
	}
	if (strcmp(days[dayscount].fall, "нет")) {
		switch (max) {
		case 1:
		case 2:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		case 3:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		case 4:
		case 5:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		}
	}
	else {
		switch (max) {
		case 1:
		case 2:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		case 3:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		case 4:
		case 5:
			if (strlen(days[dayscount].fact) > 0) {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			else {
				if (strcmp(maininf, "cold")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
				if (strcmp(maininf, "hot")) {
					if (rates[dayscount].windSpeedRate <= 2) {

					}
					if (rates[dayscount].windSpeedRate == 3) {

					}
					if (rates[dayscount].windSpeedRate >= 4) {

					}
				}
			}
			break;
		}
	}
}

int main() {
	setlocale(LC_ALL, "RUS");
	printf("Ща запущю погодь...\n");
	srand(time(NULL));
	weather days[SIZE];
	fras frase;
	rate rates[SIZE];
	int cur = 0, dayscur = 0;
	FILE* input;
	FILE* frases;
	input = fopen("input.txt", "rt");
	frases = fopen("frases.txt", "rt");
	char str[SIZE] = { 0 };
	char c = '0';
	while (c != EOF) {
		fscanf(input, "%d.%d.%d\t%d..%d\t%d..%d\t%d..%d\t%s\t", &days[cur].date[0],
			&days[cur].date[1],
			&days[cur].date[2],
			&days[cur].nighttemp[0],
			&days[cur].nighttemp[1],
			&days[cur].daytemp[0],
			&days[cur].daytemp[1],
			&days[cur].feelstemp[0],
			&days[cur].feelstemp[1],
			&days[cur].fall);
		fscanf(input, "%s", &str);
		if (strlen(str) == 3) {
			sscanf(str, "%d-%d", &days[cur].windspeed[0], &days[cur].windspeed[1]);
		}
		else {
			sscanf(str, "%d", &days[cur].windspeed[0]);
		}
		fscanf(input, "%s", &days[cur].windway);
		fscanf(input, "%s", &str);
		if (strlen(str) == 3) {
			sscanf(str, "%d-%d", &days[cur].gust[0], &days[cur].gust[1]);
		}
		else {
			sscanf(str, "%d", &days[cur].gust[0]);
		}
		fscanf(input, "%d", &days[cur].pressure);
		c = fgetc(input);
		if (c == ' ') {
			fscanf(input, "%s", &days[cur].fact);
			c = fgetc(input);
		}
		switch (days[cur].date[1]) {
		case 1:
			strcpy(days[cur].month, "января", SIZE);
			strcpy(days[cur].time_of_year, "зима", SIZE);
			break;
		case 2:
			strcpy(days[cur].month, "февраля", SIZE);
			strcpy(days[cur].time_of_year, "зима", SIZE);
			break;
		case 3:
			strcpy(days[cur].month, "марта", SIZE);
			strcpy(days[cur].time_of_year, "весна", SIZE);
			break;
		case 4:
			strcpy(days[cur].month, "апреля", SIZE);
			strcpy(days[cur].time_of_year, "весна", SIZE);
			break;
		case 5:
			strcpy(days[cur].month, "мая", SIZE);
			strcpy(days[cur].time_of_year, "весна", SIZE);
			break;
		case 6:
			strcpy(days[cur].month, "июня", SIZE);
			strcpy(days[cur].time_of_year, "лето", SIZE);
			break;
		case 7:
			strcpy(days[cur].month, "июля", SIZE);
			strcpy(days[cur].time_of_year, "лето", SIZE);
			break;
		case 8:
			strcpy(days[cur].month, "августа", SIZE);
			strcpy(days[cur].time_of_year, "лето", SIZE);
			break;
		case 9:
			strcpy(days[cur].month, "сентября", SIZE);
			strcpy(days[cur].time_of_year, "осень", SIZE);
			break;
		case 10:
			strcpy(days[cur].month, "октября", SIZE);
			strcpy(days[cur].time_of_year, "осень", SIZE);
			break;
		case 11:
			strcpy(days[cur].month, "ноября", SIZE);
			strcpy(days[cur].time_of_year, "осень", SIZE);
			break;
		case 12:
			strcpy(days[cur].month, "декабря", SIZE);
			strcpy(days[cur].time_of_year, "зима", SIZE);
			break;
		}
		cur++;
	}
	dayscur = cur;
	cur = 0;
	while (!feof(frases)) {
		fgets(str, SIZE, frases);
		if (strcmp(str, "-connection\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.connection[cur].s, str, SIZE);
				printf("%s\n", frase.connection[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_con = cur;
			cur = 0;
		}
		if (strcmp(str, "-danger\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.danger[cur].s, str, SIZE);
				printf("%s\n", frase.danger[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_dan = cur;
			cur = 0;
		}
		if (strcmp(str, "-hot\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.hot[cur].s, str, SIZE);
				printf("%s\n", frase.hot[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_hot = cur;
			cur = 0;
		}
		if (strcmp(str, "-cold\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.cold[cur].s, str, SIZE);
				printf("%s\n", frase.cold[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_cold = cur;
			cur = 0;
		}
		if (strcmp(str, "-no fall\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.nofall[cur].s, str, SIZE);
				printf("%s\n", frase.nofall[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_nofall = cur;
			cur = 0;
		}
		if (strcmp(str, "-fall\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.fall[cur].s, str, SIZE);
				printf("%s\n", frase.fall[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_fall = cur;
			cur = 0;
		}
		if (strcmp(str, "-snow\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.snow[cur].s, str, SIZE);
				printf("%s\n", frase.snow[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_snow = cur;
			cur = 0;
		}
		if (strcmp(str, "-rain\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.rain[cur].s, str, SIZE);
				printf("%s\n", frase.rain[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_rain = cur;
			cur = 0;
		}
		if (strcmp(str, "-no wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.nowind[cur].s, str, SIZE);
				printf("%s\n", frase.nowind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_nowind = cur;
			cur = 0;
		}
		if (strcmp(str, "-wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.wind[cur].s, str, SIZE);
				printf("%s\n", frase.wind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_wind = cur;
			cur = 0;
		}
		if (strcmp(str, "-strong wind\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.strongwind[cur].s, str, SIZE);
				printf("%s\n", frase.strongwind[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_strong = cur;
			cur = 0;
		}
		if (strcmp(str, "-low pressure\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.lowpressure[cur].s, str, SIZE);
				printf("%s\n", frase.lowpressure[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_low = cur;
			cur = 0;
		}
		if (strcmp(str, "-greeting\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.greeting[cur].s, str, SIZE);
				printf("%s\n", frase.greeting[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_greet = cur;
			cur = 0;
		}
		if (strcmp(str, "-place\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.place[cur].s, str, SIZE);
				printf("%s\n", frase.place[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_place = cur;
			cur = 0;
		}
		if (strcmp(str, "-when\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.when[cur].s, str, SIZE);
				printf("%s\n", frase.when[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_when = cur;
			cur = 0;
		}
		if (strcmp(str, "-unions\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.unions[cur].s, str, SIZE);
				printf("%s\n", frase.unions[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_union = cur;
			cur = 0;
		}
		if (strcmp(str, "-verbs\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.verbs[cur].s, str, SIZE);
				printf("%s\n", frase.unions[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_verb = cur;
			cur = 0;
		}
		if (strcmp(str, "-high pressure\n") == 0) {
			fgets(str, SIZE, frases);
			while (strcmp(str, "\n") != 0 && strcmp(str, frase.highpressure[cur - 1].s) != 0) {
				str[strlen(str) - 1] = '\0';
				strcpy(frase.highpressure[cur].s, str, SIZE);
				printf("%s\n", frase.highpressure[cur].s);
				cur++;
				fgets(str, SIZE, frases);
			}
			frase.cur_high = cur;
			cur = 0;
		}
	}
	fclose(input);
	fclose(frases);
	for (int dayCount = 0; dayCount < dayscur; ++dayCount)
	{
		// TEMP RATE
		if (days[dayCount].daytemp[0] >= 30) rates[dayCount].hotTempRate = 5;
		if (days[dayCount].daytemp[0] >= 20 && days[dayCount].daytemp[0] <= 29) rates[dayCount].hotTempRate = 4;
		if (days[dayCount].daytemp[0] >= 10 && days[dayCount].daytemp[0] <= 19) rates[dayCount].hotTempRate = 3;
		if (days[dayCount].daytemp[0] >= 5 && days[dayCount].daytemp[0] <= 9) rates[dayCount].hotTempRate = 2;
		if (days[dayCount].daytemp[0] == 0) rates[dayCount].hotTempRate = 1;

		if (days[dayCount].daytemp[0] <= 30) rates[dayCount].coldTempRate = 5;
		if (days[dayCount].daytemp[0] >= -29 && days[dayCount].daytemp[0] <= -20) rates[dayCount].coldTempRate = 4;
		if (days[dayCount].daytemp[0] >= -19 && days[dayCount].daytemp[0] <= -10) rates[dayCount].coldTempRate = 3;
		if (days[dayCount].daytemp[0] >= -9 && days[dayCount].daytemp[0] <= -5) rates[dayCount].coldTempRate = 2;
		if (days[dayCount].daytemp[0] == 0) rates[dayCount].coldTempRate = 1;

		// WIND RATE
		if (days[dayCount].windspeed[0] >= 33) rates[dayCount].windSpeedRate = 5;
		if (days[dayCount].windspeed[0] <= 32 && days[dayCount].windspeed[0] >= 25) rates[dayCount].windSpeedRate = 4;
		if (days[dayCount].windspeed[0] <= 24 && days[dayCount].windspeed[0] >= 15) rates[dayCount].windSpeedRate = 3;
		if (days[dayCount].windspeed[0] <= 14 && days[dayCount].windspeed[0] >= 6) rates[dayCount].windSpeedRate = 2;
		if (days[dayCount].windspeed[0] <= 5 && days[dayCount].windspeed[0] >= 0) rates[dayCount].windSpeedRate = 1;

		// PRESSURE RATE
		if (days[dayCount].pressure <= 740) rates[dayCount].pressureRate = 0;
		if (days[dayCount].pressure <= 759 && days[dayCount].pressure >= 741) rates[dayCount].pressureRate = 1;
		if (days[dayCount].pressure >= 760) rates[dayCount].pressureRate = 2;
	}
}
